#Init AudioFile
begin; #

# INITIALIZE PARALLELL PORTS

output_port MEGport = output_port_manager.get_port(2);
output_port audiofile = output_port_manager.get_port(3);
output_port MEGport2 = output_port_manager.get_port(1);

#output_port audioTrigger = output_port_manager.get_port(3);

###>> Init subject specific vars *****************************
#Generate unique result file name	
string thisDate = date_time("yymmdd");	
string thisTime = date_time("hhnnss");
string subjID = logfile.subject();

#Define subject name
string enterfname = logfile.subject();

#Start presentation with default settings
default.present();
parameter_window.remove_all();

#Create an array of stimuli from file
string fname = "stimlist.txt";
int nCond = 6; #total n of conditions (3x2)
int nCol_stimlist = 4; #n of columns in trigtable (fname)

int nTin = 1;  #n conditions within "tinnitus"
int nBkg = 6;  #n conditions within "tinnitus" + background

string kss_file_name = subjID + "_" + thisDate + "_" + thisTime + ".txt";
output_file kss_data = new output_file;
kss_data.open(kss_file_name);
kss_data.print("subj" + "\t" +
		"Type" + "\t" +
		"date" + "\t" +
		"time" + "\t" +
		"response" + "\n");
kss_data.close();

response_data newbutton;
string myResponse;


array<string> allCond[nCond][nCol_stimlist];
input_file myfile = new input_file; 
myfile.open(fname);

#Parse file
loop int r = 1 until r == (nCond + 1) begin
	allCond[r][1] = myfile.get_string();
	allCond[r][2] = myfile.get_string(); 
	allCond[r][3] = myfile.get_string();
	allCond[r][4] = myfile.get_string();

	r=r+1;
end;
myfile.close();

/* Columns in allCond:
1 block name
2 audiofile number
3 trigfilename
*/

#Randomization arrays to select index in stimlist
array<int> t[] = {0};
array<int> b[] = {0, 1, 2, 3, 4, 5};

string TrialStatus = ""; #init text to screen
string TrialName = ""; #init text to screen

int numBlocks = 10;	#n of blocks (containing num_reps of all conditions)
int idx = 0;			#initialize index for conditions

int nrows;

double current_time = 0;

#Will need block loop from here

loop int currBlock = 1 until currBlock > numBlocks begin
	
	t.shuffle();

	int trialcounter = 1; #Trial counter within block for monitor

	loop int tix = 1 until tix > nTin begin
		
		b.shuffle();

		loop int bix = 1 until bix > nBkg begin
			
			idx = 3*t[tix]+1+1*b[bix];
			
			nrows = int(allCond[idx][4]);
			
			#prepare empty array for triglists
			array<string> triglist[nrows][10];
			
			#Parse triglist for idx condition
			input_file mytrigs = new input_file; 
			mytrigs.open(allCond[idx][3]);
			
			#Parse file
			loop int r = 1 until r > nrows begin
				triglist[r][1] = mytrigs.get_string();
				triglist[r][2] = mytrigs.get_string(); 
				triglist[r][3] = mytrigs.get_string();
				triglist[r][4] = mytrigs.get_string();
				triglist[r][5] = mytrigs.get_string(); 
				triglist[r][6] = mytrigs.get_string();
				triglist[r][7] = mytrigs.get_string();
				triglist[r][8] = mytrigs.get_string();
				triglist[r][9] = mytrigs.get_string(); 
				triglist[r][10] = mytrigs.get_string(); 
				r=r+1;
			end;
			mytrigs.close();
			
			/* Colums in triglis:
			1 Trialname
			2 STI101 decimal value
			3 GOgap
			4 POpulse
			5 GPgap
			6 GPpulse
			7 PPgap
			8 PPpulse
			9 Gap onset (ms)
			10 Pulse Onset (ms)
			*/
			
			int AudioFileTTL = int(allCond[idx][2]);	#AudioFile trigger value
			
			int MegTTL = int(triglist[bix][2]);			#Filestart MEGTTL decimal value
			
			#Write TrialStatus on screen
			TrialName = allCond[idx][1];
			TrialStatus = "Trial: " + TrialName + "\n" +
							  "Block #: " + string(currBlock) + "\n" +
							  "AF Trig: " + string(AudioFileTTL) + "\n";
			myStatusText.set_caption(TrialStatus);
			myStatusText.redraw();
			tr_statusText.present();
			term.print_line(TrialStatus);
			
			#Preload sound of trial in AudioFile
			audiofile.send_code(AudioFileTTL,80);
			wait_interval(50); #Give AudioFile time to load next file
			
			#Send trigger to AudioFile to play sound
			audiofile.send_code(128,10);
			
			double starting_time = clock.time_double();
			
			#Send MEG trigger for file start
			MEGport.send_code(MegTTL,20); 
			current_time = clock.time_double()-starting_time;
			term.print_line(current_time);
			
			#MEGport2.send_code(MegTTL2,20);

			#Trigger-loop here
			loop int i = 1 until i > nrows begin
				
				int GOgap = int(triglist[i][5]);			# 1 if conditions contains gap-only gap
				int POpulse = int(triglist[i][6]);		# 1 if conditions contains pulse-only pulse
				int GPgap = int(triglist[i][7]);			# 1 if conditions contains gap+pulse gap
				int GPpulse = int(triglist[i][8]);		# 1 if conditions contains gap+pulse pulse
				
				int PPgap = int(triglist[i][3]);			# 1 if conditions contains pp+pulse gap
				int PPpulse = int(triglist[i][4]);		# 1 if conditions contains pp+pulse pulse
				
				int GapWait = int(triglist[i][9]);		# 1 if conditions contains gap+pulse pulse
				int PulseWait = int(triglist[i][10]);	# 1 if conditions contains gap+pulse pulse
				
				if GOgap == 1 then
					wait_interval(GapWait);
					MEGport.send_code(MegTTL+8,20); 
					current_time = clock.time_double()-starting_time;
					#MEGport2.send_code(MegTTL2,20);
					term.print_line(current_time);
				end;
				
				if POpulse == 1 then
					wait_interval(PulseWait);
					MEGport.send_code(MegTTL+4,20); 
					current_time = clock.time_double()-starting_time;
					#MEGport2.send_code(MegTTL2,20);
					term.print_line(current_time);
				end;
				
				if GPgap == 1 then
					wait_interval(GapWait);
					MEGport.send_code(MegTTL+2,20); 
					current_time = clock.time_double()-starting_time;
					#MEGport2.send_code(MegTTL2,20);
					term.print_line(current_time);
				end;
				
				if GPpulse == 1 then
					wait_interval(PulseWait);
					MEGport.send_code(MegTTL+1,20); 
					current_time = clock.time_double()-starting_time;
					#MEGport2.send_code(MegTTL2,20);
					term.print_line(current_time);
				end;
				
				if PPgap == 1 then
					wait_interval(GapWait);
					MEGport.send_code(MegTTL+32,20); 
					current_time = clock.time_double()-starting_time;
					#MEGport2.send_code(MegTTL2,20);
					term.print_line(current_time);
				end;
				
				if PPpulse == 1 then
					wait_interval(PulseWait);
					MEGport.send_code(MegTTL+16,20); 
					current_time = clock.time_double()-starting_time;
					#MEGport2.send_code(MegTTL2,20);
					term.print_line(current_time);
				end;
				
				i = i+1
				
			end;
			
			kss_data.open_append(kss_file_name);
			kss_data.print(subjID + "\t" +
			"Condition" + "\t" +
			thisDate + "\t" +
			date_time("hhnnss") + "\t" +
			TrialName + "\n"
			);
			kss_data.close();
			
			wait_interval(2000); #Extra wait after last trial in condition
			
			bix = bix + 1;
			
		end;
		
	tix = tix + 1;
	
	end;

	#Pause experiment with break screen
	kss.present();
	
	newbutton = response_manager.last_response_data();
	myResponse = string(newbutton.button());

	kss_data.open_append(kss_file_name);
	kss_data.print(subjID + "\t" +
			"kss" + "\t" +
			thisDate + "\t" +
			date_time("hhnnss") + "\t" +
			myResponse + "\n"
	);
	kss_data.close();
	
	currBlock = currBlock + 1;
end;

end;